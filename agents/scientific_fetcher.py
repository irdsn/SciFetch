##################################################################################################
#                                        SCIENTIFIC FETCHER                                      #
#                                                                                                #
# Autonomous LangChain Agent that chooses the best scientific APIs (tools) to fetch academic     #
# papers based on a user-defined research prompt. It returns both raw article inputs and a       #
# summary analysis with top relevant articles, and saves the output in PDF format.               #
##################################################################################################

##################################################################################################
#                                            IMPORTS                                             #
##################################################################################################

from dotenv import load_dotenv
from pathlib import Path
from typing import List, Dict, Any

from langchain.agents import initialize_agent, Tool
from langchain.agents.agent_types import AgentType
from langchain_openai import ChatOpenAI

from jinja2 import Environment, FileSystemLoader
from datetime import datetime
from weasyprint import HTML

from apis.PubMed import PubMedTool
from apis.arXiv import ArxivTool
from apis.OpenAlex import OpenAlexTool
from apis.EuropePMC import EuropePMCTool
from apis.CrossRef import CrossRefTool

from utils.logs_config import logger
from utils.config import OUTPUT_DIR
from utils.name_sanitizer import slugify_filename

##################################################################################################
#                                        CONFIGURATION                                           #
##################################################################################################

load_dotenv()

##################################################################################################
#                                        IMPLEMENTATION                                          #
##################################################################################################

def extract_relevant_articles(summary: str, articles: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    Filters and returns the subset of articles whose titles are explicitly mentioned
    in the generated summary.

    This function scans each line of the summary to match it against the lowercase title
    of each article. If a match is found, that article is included in the final list
    of relevant results.

    Args:
        summary (str): The summary generated by the language model.
        articles (List[Dict[str, Any]]): List of articles returned by the scientific tools.

    Returns:
        List[Dict[str, Any]]: Filtered list of articles identified as most relevant.
    """
    matched_titles = []
    for article in articles:
        title = article.get("title", "").lower()
        for line in summary.split("\n"):
            if title and title in line.lower():
                matched_titles.append(article)
                break
    return matched_titles

def run_agent(prompt: str) -> Dict[str, Any]:
    """
    Main function to run the LangChain-based agent for scientific literature retrieval.

    Given a research prompt, the agent selects relevant tools (APIs), fetches articles,
    summarizes the findings, and saves everything in PDF format.

    Args:
        prompt (str): The research question or topic provided by the user.

    Returns:
        Path: Path to the generated PDF output file.
    """

    tools = [
        Tool(name=tool.name, func=tool(), description=tool.description)
        for tool in [ArxivTool, PubMedTool, OpenAlexTool, EuropePMCTool, CrossRefTool]
    ]

    llm = ChatOpenAI(temperature=0.2, model="gpt-4o")

    agent = initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        verbose=True,
        return_intermediate_steps=True
    )

    logger.info("\U0001F680 Launching autonomous agent for scientific literature fetching...")

    try:
        result = agent.invoke({"input": prompt})

        if not result or "intermediate_steps" not in result:
            raise RuntimeError("Agent returned no valid output or failed internally.")

        intermediate_steps = result.get("intermediate_steps", [])

        articles = []
        for step in intermediate_steps:
            if (
                isinstance(step, tuple)
                and isinstance(step[1], list)
                and all(isinstance(item, dict) for item in step[1])
            ):
                articles.extend(step[1])

        summary_prompt = (
            "You are a scientific assistant. Based on the user's query: \n"
            f"'{prompt}'\n"
            "And the following articles found (titles and abstracts), write a short summary of the topic, "
            "highlighting the most relevant papers and their contributions. Use at least 5 papers if they are sufficiently related.\n\n"
        )

        for article in articles:
            title = article.get("title", "")
            abstract = article.get("abstract") or ""
            summary_prompt += f"- {title}: {abstract[:500]}\n"

        summary_response = llm.invoke(summary_prompt)
        summary = summary_response.content.strip()

        logger.info("✅ Agent completed run.")

        relevant_articles = extract_relevant_articles(summary, articles)
        for article in relevant_articles:
            title = article.get("title", "")
            if title:
                summary = summary.replace(title, f"**{title}**")

        filename = slugify_filename(prompt) or "scifetch_report"
        pdf_output_path = OUTPUT_DIR / f"{filename}.pdf"

        # Jinja2 template rendering
        env = Environment(loader=FileSystemLoader("templates"))
        template = env.get_template("report_template.html")

        # Ensure all articles have 'abstract' as a string to avoid NoneType errors in template
        for article in articles:
            if article.get("abstract") is None:
                article["abstract"] = ""

        rendered_html = template.render(
            prompt=prompt,
            summary=summary,
            articles=articles,
            generation_date=datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
        )

        # Save PDF
        HTML(string=rendered_html).write_pdf(pdf_output_path)

        result_data = {
            "summary": summary,
            "articles": articles,
            "html_preview": rendered_html,  # Frontend preview
            "output_file": str(pdf_output_path)
        }

        return result_data

    except Exception as e:
        logger.error(f"❌ Agent failed with error: {e}")
        raise e

##################################################################################################
#                                               MAIN                                             #
##################################################################################################

if __name__ == "__main__":
    user_prompt = input("Provide your scientific research prompt: ")
    result = run_agent(user_prompt)
    print(f"\n✅ Output saved to: {result['output_file']}")
